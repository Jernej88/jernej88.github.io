<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jernej Zupančič blog (Posts about minio)</title><link>https://jernejzupancic.si/</link><description></description><atom:link href="https://jernejzupancic.si/categories/minio.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:jernej@jernejzupancic.si"&gt;Jernej Zupančič&lt;/a&gt; 
 &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
 &lt;img alt="Creative Commons License BY-NC-SA"
 style="border-width:0; margin-bottom:12px;"
 src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Fri, 16 Apr 2021 08:40:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PyTest, coverage reports and Gitlab runners</title><link>https://jernejzupancic.si/posts/pytest-coverage-reports-and-gitlab-runners/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div&gt;&lt;p&gt;A friend of mine says that he doesn't need tests, he just writes bug-free code. Everyone thinks that his or her code is without bugs, while I think that a bunch of non-trivial amount of code almost definitely contains a bug or two, if not tested properly. And even then, one cannot be sure that no hidden bug lurks somewhere. I was not always like that. Once upon a time I too thought that testing is a waste of time. Why would you test something if you just know it works? Such is the current state in research, good software development practices are rarely followed and it is up to the few of us to try and force the good practices throughout the research organizations.&lt;/p&gt;
&lt;p&gt;I am still learning about what can and should be done. Testing is one of the things I try to enforce with fellow researchers and students, when working on common projects. The other ones are: automation, documentation, and reproducibility. In this post I will describe our testing set-up I established. Since we work mainly with Python, we use popular &lt;a href="https://docs.pytest.org/en/latest/"&gt;PyTest&lt;/a&gt; framework for testing and the &lt;a href="https://pytest-cov.readthedocs.io/en/latest/"&gt;pytest-cov&lt;/a&gt;, a PyTest plug-in using &lt;a href="https://coverage.readthedocs.io/en/latest/"&gt;coverage&lt;/a&gt; for measuring the code coverage of Python programs. After the test coverage report generation, the html report is uploaded to a self-hosted &lt;a href="https://min.io/"&gt;Minio&lt;/a&gt; instance for viewing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jernejzupancic.si/posts/pytest-coverage-reports-and-gitlab-runners/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>gitlab</category><category>minio</category><category>pytest</category><category>python</category><category>testing</category><guid>https://jernejzupancic.si/posts/pytest-coverage-reports-and-gitlab-runners/</guid><pubDate>Fri, 21 Feb 2020 20:52:45 GMT</pubDate></item></channel></rss>