<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jernej Zupančič blog</title><link>https://jernejzupancic.si/</link><description>Blog on technical stuff, software development, work and life.</description><atom:link href="https://jernejzupancic.si/sl/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>sl</language><copyright>Contents © 2020 &lt;a href="mailto:jernej@jernejzupancic.si"&gt;Jernej Zupančič&lt;/a&gt; 
 &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
 &lt;img alt="Creative Commons License BY-NC-SA"
 style="border-width:0; margin-bottom:12px;"
 src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Fri, 21 Feb 2020 22:13:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PyTest, coverage reports and Gitlab runners</title><link>https://jernejzupancic.si/sl/posts/pytest-coverage-reports-and-gitlab-runners/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div&gt;&lt;p&gt;A friend of mine says that he doesn't need tests, he just writes bug-free code. Everyone thinks that his or her code is without bugs, while I think that a bunch of non-trivial amount of code almost definitely contains a bug or two, if not tested properly. And even then, one cannot be sure that no hidden bug lurks somewhere. I was not always like that. Once upon a time I too thought that testing is a waste of time. Why would you test something if you just know it works? Such is the current state in research, good software development practices are rarely followed and it is up to the few of us to try and force the good practices throughout the research organizations.&lt;/p&gt;
&lt;p&gt;I am still learning about what can and should be done. Testing is one of the things I try to enforce with fellow researchers and students, when working on common projects. The other ones are: automation, documentation, and reproducibility. In this post I will describe our testing set-up I established. Since we work mainly with Python, we use popular &lt;a href="https://docs.pytest.org/en/latest/"&gt;PyTest&lt;/a&gt; framework for testing and the &lt;a href="https://pytest-cov.readthedocs.io/en/latest/"&gt;pytest-cov&lt;/a&gt;, a PyTest plug-in using &lt;a href="https://coverage.readthedocs.io/en/latest/"&gt;coverage&lt;/a&gt; for measuring the code coverage of Python programs. After the test coverage report generation, the html report is uploaded to a self-hosted &lt;a href="https://min.io/"&gt;Minio&lt;/a&gt; instance for viewing.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://jernejzupancic.si/sl/posts/pytest-coverage-reports-and-gitlab-runners/"&gt;Več o tem…&lt;/a&gt; (še 4 min za branje preostanka)&lt;/p&gt;&lt;/div&gt;</description><guid>https://jernejzupancic.si/sl/posts/pytest-coverage-reports-and-gitlab-runners/</guid><pubDate>Fri, 21 Feb 2020 20:52:45 GMT</pubDate></item><item><title>PostgreSQL and faster trigram similarity search</title><link>https://jernejzupancic.si/sl/posts/postgresql-and-faster-trigram-similarity-search/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div&gt;&lt;p&gt;Awesome &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; claims to be the world's most advanced open source relational database. Considering what it can do, it probably really is. Today I want to write about a text search functionality it supports through the &lt;a href="https://www.postgresql.org/docs/12/pgtrgm.html"&gt;&lt;strong&gt;pg_trgm&lt;/strong&gt;&lt;/a&gt; module.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://jernejzupancic.si/sl/posts/postgresql-and-faster-trigram-similarity-search/"&gt;Več o tem…&lt;/a&gt; (še 5 min za branje preostanka)&lt;/p&gt;&lt;/div&gt;</description><guid>https://jernejzupancic.si/sl/posts/postgresql-and-faster-trigram-similarity-search/</guid><pubDate>Wed, 12 Feb 2020 21:08:24 GMT</pubDate></item><item><title>Mysterious nginx upstream errors</title><link>https://jernejzupancic.si/sl/posts/mysterious-nginx-upstream-errors/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div&gt;&lt;p&gt;For easier web app deploy we use the following stack&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ubuntu server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/products/container-runtime"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Containerized &lt;a href="https://github.com/jwilder/nginx-proxy"&gt;Nginx proxy&lt;/a&gt; with &lt;a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion"&gt;Letsencrypt companion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Containerized Web app&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker simplifies the web app development by enabling us, the developers, to pin the majority of the software dependencies versions, and, further, to have the exact same dependencies during development as for the deploy. This greatly reduces the "&lt;em&gt;it works on my machine&lt;/em&gt;" moments. Those moments do not go away fully, because we usually do not specify the version of every last dependency used, however, they become really rare. One thing we do not test in development, though, is the web app operation when coupled with Nginx. And that sometimes leads to unexpected problems, such as the random upstream errors I will describe in next few lines.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://jernejzupancic.si/sl/posts/mysterious-nginx-upstream-errors/"&gt;Več o tem…&lt;/a&gt; (še 3 min za branje preostanka)&lt;/p&gt;&lt;/div&gt;</description><guid>https://jernejzupancic.si/sl/posts/mysterious-nginx-upstream-errors/</guid><pubDate>Fri, 07 Feb 2020 21:06:59 GMT</pubDate></item><item><title>Python and tricky function arguments</title><link>https://jernejzupancic.si/sl/posts/python-and-tricky-function-arguments/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Python allowed me to write several pieces of useful software using drastically smaller number of lines required at some other languages. My first programming steps were in Java, during the &lt;em&gt;Introduction to programming&lt;/em&gt; course at the Faculty of Mathematics and Physics, Ljubljana. Java and I didn't get along well. I enjoyed the course but writing Java code didn't really inspire me. The second year, however, our tutors upgraded to Python. Now that felt pretty good. I felt much more comfortable writing small scripts in Python than Java and used Python and it's ecosystem in other courses as well.
Python code, however, sometimes behaves in a way that seems buggy at first, unless you know what is happening.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jernejzupancic.si/sl/posts/python-and-tricky-function-arguments/"&gt;Več o tem…&lt;/a&gt; (še 2 min za branje preostanka)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://jernejzupancic.si/sl/posts/python-and-tricky-function-arguments/</guid><pubDate>Wed, 05 Feb 2020 20:53:24 GMT</pubDate></item><item><title>Hello world!</title><link>https://jernejzupancic.si/sl/posts/hello-world/</link><dc:creator>Jernej Zupančič</dc:creator><description>&lt;div&gt;&lt;p&gt;So here it goes, my first post on my first blog. The goal of this blog is to document the things I learn related to technology, software development, artificial intelligence, project management and soft skills. Occasionally I will add a thought or two about life in general. 
&lt;/p&gt;&lt;p&gt;&lt;a href="https://jernejzupancic.si/sl/posts/hello-world/"&gt;Več o tem…&lt;/a&gt; (še 1 min za branje preostanka)&lt;/p&gt;&lt;/div&gt;</description><guid>https://jernejzupancic.si/sl/posts/hello-world/</guid><pubDate>Tue, 04 Feb 2020 21:48:51 GMT</pubDate></item></channel></rss>